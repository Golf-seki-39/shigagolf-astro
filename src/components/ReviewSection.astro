---
const { range } = Astro.props;
const appId = import.meta.env.PUBLIC_VITE_APP_ID;
---

<section id="review-form-section" class="max-w-2xl mx-auto mt-12 p-6 bg-white rounded-lg shadow-md">
  <h2 class="text-3xl font-bold mb-2 text-center">レビューを投稿する</h2>
  <p class="text-slate-500 mb-6 text-xl text-center">{range.name}</p>
  
  <form id="review-form" data-app-id={appId}>
    <input type="hidden" id="rangeId" value={range.id}>
    <div class="space-y-6">
      <div>
        <label for="reviewerName" class="block text-lg font-semibold mb-2">ニックネーム</label>
        <input type="text" id="reviewerName" required class="w-full p-3 border border-slate-300 rounded-md" placeholder="例：シガゴルファー">
      </div>

      <div id="admin-scores-section" class="hidden space-y-4 pt-4 border-t border-dashed">
        <h3 class="text-lg font-bold text-green-700">【管理人用】レーダーチャート評価</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label for="score_range" class="block text-sm font-medium text-slate-700">打席・レンジの質</label>
            <input type="number" id="score_range" min="1" max="5" class="mt-1 block w-full p-2 border border-slate-300 rounded-md" required>
          </div>
          <div>
            <label for="score_facilities" class="block text-sm font-medium text-slate-700">設備の充実度</label>
            <input type="number" id="score_facilities" min="1" max="5" class="mt-1 block w-full p-2 border border-slate-300 rounded-md" required>
          </div>
          <div>
            <label for="score_variety" class="block text-sm font-medium text-slate-700">練習環境の多様性</label>
            <input type="number" id="score_variety" min="1" max="5" class="mt-1 block w-full p-2 border border-slate-300 rounded-md" required>
          </div>
          <div>
            <label for="score_cost" class="block text-sm font-medium text-slate-700">コストパフォーマンス</label>
            <input type="number" id="score_cost" min="1" max="5" class="mt-1 block w-full p-2 border border-slate-300 rounded-md" required>
          </div>
          <div class="sm:col-span-2">
            <label for="score_hospitality" class="block text-sm font-medium text-slate-700">快適性・ホスピタリティ</label>
            <input type="number" id="score_hospitality" min="1" max="5" class="mt-1 block w-full p-2 border border-slate-300 rounded-md" required>
          </div>
        </div>
      </div>

      <div>
        <p class="block text-lg font-semibold mb-2">総合評価</p>
        <div class="flex justify-between items-center">
          <div class="star-rating flex flex-row-reverse justify-end">
            <input type="radio" id="star5" name="rating" value="5" required><label for="star5">★</label>
            <input type="radio" id="star4" name="rating" value="4"><label for="star4">★</label>
            <input type="radio" id="star3" name="rating" value="3"><label for="star3">★</label>
            <input type="radio" id="star2" name="rating" value="2"><label for="star2">★</label>
            <input type="radio" id="star1" name="rating" value="1"><label for="star1">★</label>
          </div>
          <a href="/criteria" target="_blank" class="text-sm text-green-700 hover:underline">評価基準についてはこちら</a>
        </div>
      </div>
      <div>
        <label for="reviewTitle" class="block text-lg font-semibold mb-2">レビュータイトル</label>
        <input type="text" id="reviewTitle" required class="w-full p-3 border border-slate-300 rounded-md" placeholder="例：最高の練習環境でした！">
      </div>
      <div>
        <label for="reviewComment" class="block text-lg font-semibold mb-2">レビュー本文</label>
        <textarea id="reviewComment" rows="6" required class="w-full p-3 border border-slate-300 rounded-md" placeholder="施設の良かった点、改善してほしい点などを具体的に教えてください。"></textarea>
      </div>
       <div>
        <label class="block text-lg font-semibold mb-2">写真を追加 (5枚まで)</label>
        <div id="image-preview-container" class="flex flex-wrap gap-2 p-2 border-2 border-dashed border-slate-300 rounded-md min-h-[110px] bg-slate-50"></div>
        <div class="mt-2">
          <label for="review-image-upload" class="cursor-pointer bg-white text-green-700 font-bold py-2 px-4 border border-green-700 rounded-lg hover:bg-green-50 transition">ファイルを選択</label>
          <input type="file" id="review-image-upload" accept="image/png, image/jpeg" class="hidden" multiple>
        </div>
      </div>
      <div class="text-right">
        <button type="submit" class="bg-green-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition text-lg">投稿する</button>
      </div>
    </div>
  </form>
</section>

<style>
  .star-rating input[type="radio"] { display: none; }
  .star-rating label { font-size: 2.5rem; color: #d1d5db; cursor: pointer; transition: color 0.2s; }
  .star-rating input[type="radio"]:checked ~ label, .star-rating label:hover, .star-rating label:hover ~ label { color: #f59e0b; }
</style>


<script>
  // Firebaseの必要な機能をインポートします
  import { db, storage } from '../lib/firebase.js'; // firebase.jsのパスは環境に合わせて確認してください
  import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
  import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';

  // --- 要素の取得 ---
  const form = document.getElementById('review-form');
  const submitButton = form.querySelector('button[type="submit"]');
  const rangeId = document.getElementById('rangeId').value;
  const imageUploadInput = document.getElementById('review-image-upload');
  const imagePreviewContainer = document.getElementById('image-preview-container');
  let imageFiles = [];

  // --- 画像プレビュー機能 ---
  imageUploadInput.addEventListener('change', (event) => {
    imagePreviewContainer.innerHTML = ''; // プレビューをリセット
    imageFiles = Array.from(event.target.files).slice(0, 5); // 5枚までに制限

    imageFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imgElement = document.createElement('img');
        imgElement.src = e.target.result;
        imgElement.className = 'w-24 h-24 object-cover rounded-md';
        imagePreviewContainer.appendChild(imgElement);
      };
      reader.readAsDataURL(file);
    });
  });
  
  // --- フォーム送信時の処理 ---
  form.addEventListener('submit', async (e) => {
    e.preventDefault(); // ページの再読み込みをキャンセル

    submitButton.disabled = true;
    submitButton.textContent = '投稿中...';

    try {
      // 1. フォームから入力データを取得
      const author = document.getElementById('reviewerName').value || '匿名';
      const rating = parseInt(form.querySelector('input[name="rating"]:checked')?.value, 10);
      const title = document.getElementById('reviewTitle').value;
      const body = document.getElementById('reviewComment').value;
      
      if (!rating) {
        alert('総合評価を選択してください。');
        throw new Error('Rating not selected');
      }

      // 2. 画像をFirebase Storageにアップロード (Promise.allで並列処理)
      const uploadPromises = imageFiles.map(file => {
        const imageRef = ref(storage, `reviews/${rangeId}/${Date.now()}_${file.name}`);
        return uploadBytes(imageRef, file).then(snapshot => getDownloadURL(snapshot.ref));
      });
      const imageUrls = await Promise.all(uploadPromises);

      const newReviewData = {
        author,
        rating,
        title,
        body,
        imageUrls,
        createdAt: new Date(), // ★画面表示用の仮の日付
      };

      // 3. ★★★先に画面にレビューを「擬似的」に追加★★★
      addReviewToUI(newReviewData);

      // 4. Firestoreデータベースにレビューを保存
      const publicDataPath = `artifacts/${import.meta.env.PUBLIC_FIREBASE_APP_ID}/public/data`;
      const reviewsCollection = collection(db, publicDataPath, 'practice_ranges', rangeId, 'reviews');
      
      await addDoc(reviewsCollection, {
        ...newReviewData,
        createdAt: serverTimestamp(), // ★DBには正確なサーバー時刻を保存
      });

      // 5. 投稿完了後の処理
      form.style.display = 'none';
      const successMessage = document.createElement('div');
      successMessage.className = 'text-center py-10';
      successMessage.innerHTML = `<p class="text-xl font-bold text-green-700">レビューの投稿ありがとうございます！</p><p class="mt-2 text-slate-600">貴重なご意見に感謝いたします。</p>`;
      form.parentElement.appendChild(successMessage);

    } catch (error) {
      console.error("レビュー投稿中にエラーが発生しました: ", error);
      alert("エラーが発生しました。時間をおいて再度お試しください。");
      submitButton.disabled = false;
      submitButton.textContent = '投稿する';
    }
  });

  // --- UIに新しいレビューを追加する関数 ---
  function addReviewToUI(review) {
    const reviewsList = document.getElementById('reviews-list');
    if (!reviewsList) return;

    // 「レビューはありません」のメッセージがあれば消す
    const noReviewsMessage = document.getElementById('no-reviews-message');
    if (noReviewsMessage) {
      noReviewsMessage.remove();
    }

    const stars = '★'.repeat(review.rating) + '☆'.repeat(5 - review.rating);
    const date = review.createdAt.toLocaleDateString('ja-JP');

    const article = document.createElement('article');
    article.className = 'border-b border-slate-200 pb-6';
    
    // 画像部分のHTMLを生成
    let imagesHTML = '';
    if (review.imageUrls && review.imageUrls.length > 0) {
      imagesHTML = `
        <div class="mt-4 flex flex-wrap gap-3">
          ${review.imageUrls.map(url => `
            <a href="${url}" target="_blank" rel="noopener noreferrer" class="block">
              <img src="${url}" alt="投稿写真" class="w-28 h-28 sm:w-32 sm:h-32 md:w-40 md:h-40 object-cover rounded-md hover:opacity-80 transition" loading="lazy" />
            </a>
          `).join('')}
        </div>`;
    }

    // レビュー全体のHTMLを生成
    article.innerHTML = `
      <div class="flex items-center gap-x-4">
        <div class="text-amber-500 text-xl" title="${review.rating}つ星">${stars}</div>
      </div>
      <h3 class="text-lg font-bold mt-2">${review.title}</h3>
      <p class="text-slate-600 my-4 whitespace-pre-wrap">${review.body}</p>
      ${imagesHTML}
      <p class="text-sm text-slate-400 text-right mt-4">投稿者: ${review.author} / 投稿日: ${date}</p>
    `;

    // 既存レビューリストの一番上に新しいレビューを追加
    reviewsList.prepend(article);
  }
</script>